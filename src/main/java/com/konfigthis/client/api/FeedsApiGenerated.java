/*
 * Content Management
 * The content management feed allows you to process content for items in bulk. You can take in content via the content feeds. Use the XSDs to manage content.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.FeedsCreateContentFeedRequest;
import com.konfigthis.client.model.FeedsCreateContentFeedResponse;
import com.konfigthis.client.model.FeedsCreateRichMediaFeedResponse;
import com.konfigthis.client.model.FeedsDisplayItemStatusResponse;
import com.konfigthis.client.model.FeedsGetFeedStatusResponse;
import java.io.File;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class FeedsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public FeedsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public FeedsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getClientId() == null) {
            throw new IllegalArgumentException("\"clientId\" is required but no API key was provided. Please set \"clientId\" with ApiClient#setClientId(String).");
        }
        if (apiClient.getPrivateKey() == null) {
            throw new IllegalArgumentException("\"privateKey\" is required but no API key was provided. Please set \"privateKey\" with ApiClient#setPrivateKey(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createContentFeedCall(String feedType, String WM_QOS_CORRELATION_ID, String WM_SVC_NAME, String WM_SEC_TIMESTAMP, String WM_SEC_AUTH_SIGNATURE, String WM_CONSUMER_ID, File _file, String WM_CONSUMER_CHANNEL_TYPE, FeedsCreateContentFeedRequest feedsCreateContentFeedRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = feedsCreateContentFeedRequest;

        // create path and map variables
        String localVarPath = "/v3/feeds";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (_file != null) {
            localVarFormParams.put("file", _file);
        }

        if (feedType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("feedType", feedType));
        }

        if (WM_CONSUMER_CHANNEL_TYPE != null) {
            localVarHeaderParams.put("WM_CONSUMER.CHANNEL.TYPE", localVarApiClient.parameterToString(WM_CONSUMER_CHANNEL_TYPE));
        }

        if (WM_QOS_CORRELATION_ID != null) {
            localVarHeaderParams.put("WM_QOS.CORRELATION_ID", localVarApiClient.parameterToString(WM_QOS_CORRELATION_ID));
        }

        if (WM_SVC_NAME != null) {
            localVarHeaderParams.put("WM_SVC.NAME", localVarApiClient.parameterToString(WM_SVC_NAME));
        }

        if (WM_SEC_TIMESTAMP != null) {
            localVarHeaderParams.put("WM_SEC.TIMESTAMP", localVarApiClient.parameterToString(WM_SEC_TIMESTAMP));
        }

        if (WM_SEC_AUTH_SIGNATURE != null) {
            localVarHeaderParams.put("WM_SEC.AUTH_SIGNATURE", localVarApiClient.parameterToString(WM_SEC_AUTH_SIGNATURE));
        }

        if (WM_CONSUMER_ID != null) {
            localVarHeaderParams.put("WM_CONSUMER.ID", localVarApiClient.parameterToString(WM_CONSUMER_ID));
        }

        final String[] localVarAccepts = {
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "privateKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createContentFeedValidateBeforeCall(String feedType, String WM_QOS_CORRELATION_ID, String WM_SVC_NAME, String WM_SEC_TIMESTAMP, String WM_SEC_AUTH_SIGNATURE, String WM_CONSUMER_ID, File _file, String WM_CONSUMER_CHANNEL_TYPE, FeedsCreateContentFeedRequest feedsCreateContentFeedRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'feedType' is set
        if (feedType == null) {
            throw new ApiException("Missing the required parameter 'feedType' when calling createContentFeed(Async)");
        }

        // verify the required parameter 'WM_QOS_CORRELATION_ID' is set
        if (WM_QOS_CORRELATION_ID == null) {
            throw new ApiException("Missing the required parameter 'WM_QOS_CORRELATION_ID' when calling createContentFeed(Async)");
        }

        // verify the required parameter 'WM_SVC_NAME' is set
        if (WM_SVC_NAME == null) {
            throw new ApiException("Missing the required parameter 'WM_SVC_NAME' when calling createContentFeed(Async)");
        }

        // verify the required parameter 'WM_SEC_TIMESTAMP' is set
        if (WM_SEC_TIMESTAMP == null) {
            throw new ApiException("Missing the required parameter 'WM_SEC_TIMESTAMP' when calling createContentFeed(Async)");
        }

        // verify the required parameter 'WM_SEC_AUTH_SIGNATURE' is set
        if (WM_SEC_AUTH_SIGNATURE == null) {
            throw new ApiException("Missing the required parameter 'WM_SEC_AUTH_SIGNATURE' when calling createContentFeed(Async)");
        }

        // verify the required parameter 'WM_CONSUMER_ID' is set
        if (WM_CONSUMER_ID == null) {
            throw new ApiException("Missing the required parameter 'WM_CONSUMER_ID' when calling createContentFeed(Async)");
        }

        // verify the required parameter '_file' is set
        if (_file == null) {
            throw new ApiException("Missing the required parameter '_file' when calling createContentFeed(Async)");
        }

        return createContentFeedCall(feedType, WM_QOS_CORRELATION_ID, WM_SVC_NAME, WM_SEC_TIMESTAMP, WM_SEC_AUTH_SIGNATURE, WM_CONSUMER_ID, _file, WM_CONSUMER_CHANNEL_TYPE, feedsCreateContentFeedRequest, _callback);

    }


    private ApiResponse<FeedsCreateContentFeedResponse> createContentFeedWithHttpInfo(String feedType, String WM_QOS_CORRELATION_ID, String WM_SVC_NAME, String WM_SEC_TIMESTAMP, String WM_SEC_AUTH_SIGNATURE, String WM_CONSUMER_ID, File _file, String WM_CONSUMER_CHANNEL_TYPE, FeedsCreateContentFeedRequest feedsCreateContentFeedRequest) throws ApiException {
        okhttp3.Call localVarCall = createContentFeedValidateBeforeCall(feedType, WM_QOS_CORRELATION_ID, WM_SVC_NAME, WM_SEC_TIMESTAMP, WM_SEC_AUTH_SIGNATURE, WM_CONSUMER_ID, _file, WM_CONSUMER_CHANNEL_TYPE, feedsCreateContentFeedRequest, null);
        Type localVarReturnType = new TypeToken<FeedsCreateContentFeedResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createContentFeedAsync(String feedType, String WM_QOS_CORRELATION_ID, String WM_SVC_NAME, String WM_SEC_TIMESTAMP, String WM_SEC_AUTH_SIGNATURE, String WM_CONSUMER_ID, File _file, String WM_CONSUMER_CHANNEL_TYPE, FeedsCreateContentFeedRequest feedsCreateContentFeedRequest, final ApiCallback<FeedsCreateContentFeedResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createContentFeedValidateBeforeCall(feedType, WM_QOS_CORRELATION_ID, WM_SVC_NAME, WM_SEC_TIMESTAMP, WM_SEC_AUTH_SIGNATURE, WM_CONSUMER_ID, _file, WM_CONSUMER_CHANNEL_TYPE, feedsCreateContentFeedRequest, _callback);
        Type localVarReturnType = new TypeToken<FeedsCreateContentFeedResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateContentFeedRequestBuilder {
        private final String feedType;
        private final String WM_QOS_CORRELATION_ID;
        private final String WM_SVC_NAME;
        private final String WM_SEC_TIMESTAMP;
        private final String WM_SEC_AUTH_SIGNATURE;
        private final String WM_CONSUMER_ID;
        private final File _file;
        private String WM_CONSUMER_CHANNEL_TYPE;

        private CreateContentFeedRequestBuilder(String feedType, String WM_QOS_CORRELATION_ID, String WM_SVC_NAME, String WM_SEC_TIMESTAMP, String WM_SEC_AUTH_SIGNATURE, String WM_CONSUMER_ID, File _file) {
            this.feedType = feedType;
            this.WM_QOS_CORRELATION_ID = WM_QOS_CORRELATION_ID;
            this.WM_SVC_NAME = WM_SVC_NAME;
            this.WM_SEC_TIMESTAMP = WM_SEC_TIMESTAMP;
            this.WM_SEC_AUTH_SIGNATURE = WM_SEC_AUTH_SIGNATURE;
            this.WM_CONSUMER_ID = WM_CONSUMER_ID;
            this._file = _file;
        }

        /**
         * Set WM_CONSUMER_CHANNEL_TYPE
         * @param WM_CONSUMER_CHANNEL_TYPE A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding (optional)
         * @return CreateContentFeedRequestBuilder
         */
        public CreateContentFeedRequestBuilder WM_CONSUMER_CHANNEL_TYPE(String WM_CONSUMER_CHANNEL_TYPE) {
            this.WM_CONSUMER_CHANNEL_TYPE = WM_CONSUMER_CHANNEL_TYPE;
            return this;
        }
        
        /**
         * Build call for createContentFeed
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            FeedsCreateContentFeedRequest feedsCreateContentFeedRequest = buildBodyParams();
            return createContentFeedCall(feedType, WM_QOS_CORRELATION_ID, WM_SVC_NAME, WM_SEC_TIMESTAMP, WM_SEC_AUTH_SIGNATURE, WM_CONSUMER_ID, _file, WM_CONSUMER_CHANNEL_TYPE, feedsCreateContentFeedRequest, _callback);
        }

        private FeedsCreateContentFeedRequest buildBodyParams() {
            FeedsCreateContentFeedRequest feedsCreateContentFeedRequest = new FeedsCreateContentFeedRequest();
            feedsCreateContentFeedRequest._file(this._file);
            return feedsCreateContentFeedRequest;
        }

        /**
         * Execute createContentFeed request
         * @return FeedsCreateContentFeedResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Operation </td><td>  -  </td></tr>
         </table>
         */
        public FeedsCreateContentFeedResponse execute() throws ApiException {
            FeedsCreateContentFeedRequest feedsCreateContentFeedRequest = buildBodyParams();
            ApiResponse<FeedsCreateContentFeedResponse> localVarResp = createContentFeedWithHttpInfo(feedType, WM_QOS_CORRELATION_ID, WM_SVC_NAME, WM_SEC_TIMESTAMP, WM_SEC_AUTH_SIGNATURE, WM_CONSUMER_ID, _file, WM_CONSUMER_CHANNEL_TYPE, feedsCreateContentFeedRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createContentFeed request with HTTP info returned
         * @return ApiResponse&lt;FeedsCreateContentFeedResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Operation </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<FeedsCreateContentFeedResponse> executeWithHttpInfo() throws ApiException {
            FeedsCreateContentFeedRequest feedsCreateContentFeedRequest = buildBodyParams();
            return createContentFeedWithHttpInfo(feedType, WM_QOS_CORRELATION_ID, WM_SVC_NAME, WM_SEC_TIMESTAMP, WM_SEC_AUTH_SIGNATURE, WM_CONSUMER_ID, _file, WM_CONSUMER_CHANNEL_TYPE, feedsCreateContentFeedRequest);
        }

        /**
         * Execute createContentFeed request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<FeedsCreateContentFeedResponse> _callback) throws ApiException {
            FeedsCreateContentFeedRequest feedsCreateContentFeedRequest = buildBodyParams();
            return createContentFeedAsync(feedType, WM_QOS_CORRELATION_ID, WM_SVC_NAME, WM_SEC_TIMESTAMP, WM_SEC_AUTH_SIGNATURE, WM_CONSUMER_ID, _file, WM_CONSUMER_CHANNEL_TYPE, feedsCreateContentFeedRequest, _callback);
        }
    }

    /**
     * Content feeds
     * You can update 10,000 items at once; updates with more than 10,000 items are not supported. Keep feed sizes below 10 MB to ensure optimal feed processing time.
     * @param feedType The feed Type (required)
     * @param WM_QOS_CORRELATION_ID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID (required)
     * @param WM_SVC_NAME Walmart Service Name (required)
     * @param WM_SEC_TIMESTAMP The Epoch timestamp (required)
     * @param WM_SEC_AUTH_SIGNATURE The vendor&#39;s digital signature, generated by running the JAR file or custom generation code (required)
     * @param WM_CONSUMER_ID A unique ID required to access the API (required)
     * @param _file Feed file to upload (required)
     * @return CreateContentFeedRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Operation </td><td>  -  </td></tr>
     </table>
     */
    public CreateContentFeedRequestBuilder createContentFeed(String feedType, String WM_QOS_CORRELATION_ID, String WM_SVC_NAME, String WM_SEC_TIMESTAMP, String WM_SEC_AUTH_SIGNATURE, String WM_CONSUMER_ID, File _file) throws IllegalArgumentException {
        if (feedType == null) throw new IllegalArgumentException("\"feedType\" is required but got null");
            

        if (WM_QOS_CORRELATION_ID == null) throw new IllegalArgumentException("\"WM_QOS_CORRELATION_ID\" is required but got null");
            

        if (WM_SVC_NAME == null) throw new IllegalArgumentException("\"WM_SVC_NAME\" is required but got null");
            

        if (WM_SEC_TIMESTAMP == null) throw new IllegalArgumentException("\"WM_SEC_TIMESTAMP\" is required but got null");
            

        if (WM_SEC_AUTH_SIGNATURE == null) throw new IllegalArgumentException("\"WM_SEC_AUTH_SIGNATURE\" is required but got null");
            

        if (WM_CONSUMER_ID == null) throw new IllegalArgumentException("\"WM_CONSUMER_ID\" is required but got null");
            

        if (_file == null) throw new IllegalArgumentException("\"_file\" is required but got null");
        return new CreateContentFeedRequestBuilder(feedType, WM_QOS_CORRELATION_ID, WM_SVC_NAME, WM_SEC_TIMESTAMP, WM_SEC_AUTH_SIGNATURE, WM_CONSUMER_ID, _file);
    }
    private okhttp3.Call createRichMediaFeedCall(String feedType, String WM_QOS_CORRELATION_ID, String WM_SVC_NAME, String WM_SEC_TIMESTAMP, String WM_SEC_AUTH_SIGNATURE, String WM_CONSUMER_ID, String body, String WM_CONSUMER_CHANNEL_TYPE, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v2/feeds";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (feedType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("feedType", feedType));
        }

        if (WM_CONSUMER_CHANNEL_TYPE != null) {
            localVarHeaderParams.put("WM_CONSUMER.CHANNEL.TYPE", localVarApiClient.parameterToString(WM_CONSUMER_CHANNEL_TYPE));
        }

        if (WM_QOS_CORRELATION_ID != null) {
            localVarHeaderParams.put("WM_QOS.CORRELATION_ID", localVarApiClient.parameterToString(WM_QOS_CORRELATION_ID));
        }

        if (WM_SVC_NAME != null) {
            localVarHeaderParams.put("WM_SVC.NAME", localVarApiClient.parameterToString(WM_SVC_NAME));
        }

        if (WM_SEC_TIMESTAMP != null) {
            localVarHeaderParams.put("WM_SEC.TIMESTAMP", localVarApiClient.parameterToString(WM_SEC_TIMESTAMP));
        }

        if (WM_SEC_AUTH_SIGNATURE != null) {
            localVarHeaderParams.put("WM_SEC.AUTH_SIGNATURE", localVarApiClient.parameterToString(WM_SEC_AUTH_SIGNATURE));
        }

        if (WM_CONSUMER_ID != null) {
            localVarHeaderParams.put("WM_CONSUMER.ID", localVarApiClient.parameterToString(WM_CONSUMER_ID));
        }

        final String[] localVarAccepts = {
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "privateKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createRichMediaFeedValidateBeforeCall(String feedType, String WM_QOS_CORRELATION_ID, String WM_SVC_NAME, String WM_SEC_TIMESTAMP, String WM_SEC_AUTH_SIGNATURE, String WM_CONSUMER_ID, String body, String WM_CONSUMER_CHANNEL_TYPE, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'feedType' is set
        if (feedType == null) {
            throw new ApiException("Missing the required parameter 'feedType' when calling createRichMediaFeed(Async)");
        }

        // verify the required parameter 'WM_QOS_CORRELATION_ID' is set
        if (WM_QOS_CORRELATION_ID == null) {
            throw new ApiException("Missing the required parameter 'WM_QOS_CORRELATION_ID' when calling createRichMediaFeed(Async)");
        }

        // verify the required parameter 'WM_SVC_NAME' is set
        if (WM_SVC_NAME == null) {
            throw new ApiException("Missing the required parameter 'WM_SVC_NAME' when calling createRichMediaFeed(Async)");
        }

        // verify the required parameter 'WM_SEC_TIMESTAMP' is set
        if (WM_SEC_TIMESTAMP == null) {
            throw new ApiException("Missing the required parameter 'WM_SEC_TIMESTAMP' when calling createRichMediaFeed(Async)");
        }

        // verify the required parameter 'WM_SEC_AUTH_SIGNATURE' is set
        if (WM_SEC_AUTH_SIGNATURE == null) {
            throw new ApiException("Missing the required parameter 'WM_SEC_AUTH_SIGNATURE' when calling createRichMediaFeed(Async)");
        }

        // verify the required parameter 'WM_CONSUMER_ID' is set
        if (WM_CONSUMER_ID == null) {
            throw new ApiException("Missing the required parameter 'WM_CONSUMER_ID' when calling createRichMediaFeed(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createRichMediaFeed(Async)");
        }

        return createRichMediaFeedCall(feedType, WM_QOS_CORRELATION_ID, WM_SVC_NAME, WM_SEC_TIMESTAMP, WM_SEC_AUTH_SIGNATURE, WM_CONSUMER_ID, body, WM_CONSUMER_CHANNEL_TYPE, _callback);

    }


    private ApiResponse<FeedsCreateRichMediaFeedResponse> createRichMediaFeedWithHttpInfo(String feedType, String WM_QOS_CORRELATION_ID, String WM_SVC_NAME, String WM_SEC_TIMESTAMP, String WM_SEC_AUTH_SIGNATURE, String WM_CONSUMER_ID, String body, String WM_CONSUMER_CHANNEL_TYPE) throws ApiException {
        okhttp3.Call localVarCall = createRichMediaFeedValidateBeforeCall(feedType, WM_QOS_CORRELATION_ID, WM_SVC_NAME, WM_SEC_TIMESTAMP, WM_SEC_AUTH_SIGNATURE, WM_CONSUMER_ID, body, WM_CONSUMER_CHANNEL_TYPE, null);
        Type localVarReturnType = new TypeToken<FeedsCreateRichMediaFeedResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createRichMediaFeedAsync(String feedType, String WM_QOS_CORRELATION_ID, String WM_SVC_NAME, String WM_SEC_TIMESTAMP, String WM_SEC_AUTH_SIGNATURE, String WM_CONSUMER_ID, String body, String WM_CONSUMER_CHANNEL_TYPE, final ApiCallback<FeedsCreateRichMediaFeedResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createRichMediaFeedValidateBeforeCall(feedType, WM_QOS_CORRELATION_ID, WM_SVC_NAME, WM_SEC_TIMESTAMP, WM_SEC_AUTH_SIGNATURE, WM_CONSUMER_ID, body, WM_CONSUMER_CHANNEL_TYPE, _callback);
        Type localVarReturnType = new TypeToken<FeedsCreateRichMediaFeedResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateRichMediaFeedRequestBuilder {
        private final String feedType;
        private final String WM_QOS_CORRELATION_ID;
        private final String WM_SVC_NAME;
        private final String WM_SEC_TIMESTAMP;
        private final String WM_SEC_AUTH_SIGNATURE;
        private final String WM_CONSUMER_ID;
        private String WM_CONSUMER_CHANNEL_TYPE;
        private String body;

        private CreateRichMediaFeedRequestBuilder(String feedType, String WM_QOS_CORRELATION_ID, String WM_SVC_NAME, String WM_SEC_TIMESTAMP, String WM_SEC_AUTH_SIGNATURE, String WM_CONSUMER_ID) {
            this.feedType = feedType;
            this.WM_QOS_CORRELATION_ID = WM_QOS_CORRELATION_ID;
            this.WM_SVC_NAME = WM_SVC_NAME;
            this.WM_SEC_TIMESTAMP = WM_SEC_TIMESTAMP;
            this.WM_SEC_AUTH_SIGNATURE = WM_SEC_AUTH_SIGNATURE;
            this.WM_CONSUMER_ID = WM_CONSUMER_ID;
        }

        /**
         * Set body
         * @param body  (optional)
         * @return CreateRichMediaFeedRequestBuilder
         */
        public CreateRichMediaFeedRequestBuilder body(String body) {
            this.body = body;
            return this;
        }

        /**
         * Set WM_CONSUMER_CHANNEL_TYPE
         * @param WM_CONSUMER_CHANNEL_TYPE A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding (optional)
         * @return CreateRichMediaFeedRequestBuilder
         */
        public CreateRichMediaFeedRequestBuilder WM_CONSUMER_CHANNEL_TYPE(String WM_CONSUMER_CHANNEL_TYPE) {
            this.WM_CONSUMER_CHANNEL_TYPE = WM_CONSUMER_CHANNEL_TYPE;
            return this;
        }
        
        /**
         * Build call for createRichMediaFeed
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            String body = buildBodyParams();
            return createRichMediaFeedCall(feedType, WM_QOS_CORRELATION_ID, WM_SVC_NAME, WM_SEC_TIMESTAMP, WM_SEC_AUTH_SIGNATURE, WM_CONSUMER_ID, body, WM_CONSUMER_CHANNEL_TYPE, _callback);
        }

        private String buildBodyParams() {
            return this.body;
        }

        /**
         * Execute createRichMediaFeed request
         * @return FeedsCreateRichMediaFeedResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Operation </td><td>  -  </td></tr>
         </table>
         */
        public FeedsCreateRichMediaFeedResponse execute() throws ApiException {
            String body = buildBodyParams();
            ApiResponse<FeedsCreateRichMediaFeedResponse> localVarResp = createRichMediaFeedWithHttpInfo(feedType, WM_QOS_CORRELATION_ID, WM_SVC_NAME, WM_SEC_TIMESTAMP, WM_SEC_AUTH_SIGNATURE, WM_CONSUMER_ID, body, WM_CONSUMER_CHANNEL_TYPE);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createRichMediaFeed request with HTTP info returned
         * @return ApiResponse&lt;FeedsCreateRichMediaFeedResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Operation </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<FeedsCreateRichMediaFeedResponse> executeWithHttpInfo() throws ApiException {
            String body = buildBodyParams();
            return createRichMediaFeedWithHttpInfo(feedType, WM_QOS_CORRELATION_ID, WM_SVC_NAME, WM_SEC_TIMESTAMP, WM_SEC_AUTH_SIGNATURE, WM_CONSUMER_ID, body, WM_CONSUMER_CHANNEL_TYPE);
        }

        /**
         * Execute createRichMediaFeed request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<FeedsCreateRichMediaFeedResponse> _callback) throws ApiException {
            String body = buildBodyParams();
            return createRichMediaFeedAsync(feedType, WM_QOS_CORRELATION_ID, WM_SVC_NAME, WM_SEC_TIMESTAMP, WM_SEC_AUTH_SIGNATURE, WM_CONSUMER_ID, body, WM_CONSUMER_CHANNEL_TYPE, _callback);
        }
    }

    /**
     * Rich Media
     * Rich Media includes material such as videos, comparison tables, and view360 media which is item-specific.
     * @param feedType The feed Type (required)
     * @param WM_QOS_CORRELATION_ID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID (required)
     * @param WM_SVC_NAME Walmart Service Name (required)
     * @param WM_SEC_TIMESTAMP The Epoch timestamp (required)
     * @param WM_SEC_AUTH_SIGNATURE The vendor&#39;s digital signature, generated by running the JAR file or custom generation code (required)
     * @param WM_CONSUMER_ID A unique ID required to access the API (required)
     * @param body  (required)
     * @return CreateRichMediaFeedRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Operation </td><td>  -  </td></tr>
     </table>
     */
    public CreateRichMediaFeedRequestBuilder createRichMediaFeed(String feedType, String WM_QOS_CORRELATION_ID, String WM_SVC_NAME, String WM_SEC_TIMESTAMP, String WM_SEC_AUTH_SIGNATURE, String WM_CONSUMER_ID) throws IllegalArgumentException {
        if (feedType == null) throw new IllegalArgumentException("\"feedType\" is required but got null");
            

        if (WM_QOS_CORRELATION_ID == null) throw new IllegalArgumentException("\"WM_QOS_CORRELATION_ID\" is required but got null");
            

        if (WM_SVC_NAME == null) throw new IllegalArgumentException("\"WM_SVC_NAME\" is required but got null");
            

        if (WM_SEC_TIMESTAMP == null) throw new IllegalArgumentException("\"WM_SEC_TIMESTAMP\" is required but got null");
            

        if (WM_SEC_AUTH_SIGNATURE == null) throw new IllegalArgumentException("\"WM_SEC_AUTH_SIGNATURE\" is required but got null");
            

        if (WM_CONSUMER_ID == null) throw new IllegalArgumentException("\"WM_CONSUMER_ID\" is required but got null");
            

        return new CreateRichMediaFeedRequestBuilder(feedType, WM_QOS_CORRELATION_ID, WM_SVC_NAME, WM_SEC_TIMESTAMP, WM_SEC_AUTH_SIGNATURE, WM_CONSUMER_ID);
    }
    private okhttp3.Call displayItemStatusCall(String feedId, String WM_QOS_CORRELATION_ID, String WM_SVC_NAME, String WM_SEC_TIMESTAMP, String WM_SEC_AUTH_SIGNATURE, String WM_CONSUMER_ID, String offset, String limit, String WM_CONSUMER_CHANNEL_TYPE, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/feeds";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (feedId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("feedId", feedId));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (WM_CONSUMER_CHANNEL_TYPE != null) {
            localVarHeaderParams.put("WM_CONSUMER.CHANNEL.TYPE", localVarApiClient.parameterToString(WM_CONSUMER_CHANNEL_TYPE));
        }

        if (WM_QOS_CORRELATION_ID != null) {
            localVarHeaderParams.put("WM_QOS.CORRELATION_ID", localVarApiClient.parameterToString(WM_QOS_CORRELATION_ID));
        }

        if (WM_SVC_NAME != null) {
            localVarHeaderParams.put("WM_SVC.NAME", localVarApiClient.parameterToString(WM_SVC_NAME));
        }

        if (WM_SEC_TIMESTAMP != null) {
            localVarHeaderParams.put("WM_SEC.TIMESTAMP", localVarApiClient.parameterToString(WM_SEC_TIMESTAMP));
        }

        if (WM_SEC_AUTH_SIGNATURE != null) {
            localVarHeaderParams.put("WM_SEC.AUTH_SIGNATURE", localVarApiClient.parameterToString(WM_SEC_AUTH_SIGNATURE));
        }

        if (WM_CONSUMER_ID != null) {
            localVarHeaderParams.put("WM_CONSUMER.ID", localVarApiClient.parameterToString(WM_CONSUMER_ID));
        }

        final String[] localVarAccepts = {
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "privateKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call displayItemStatusValidateBeforeCall(String feedId, String WM_QOS_CORRELATION_ID, String WM_SVC_NAME, String WM_SEC_TIMESTAMP, String WM_SEC_AUTH_SIGNATURE, String WM_CONSUMER_ID, String offset, String limit, String WM_CONSUMER_CHANNEL_TYPE, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'feedId' is set
        if (feedId == null) {
            throw new ApiException("Missing the required parameter 'feedId' when calling displayItemStatus(Async)");
        }

        // verify the required parameter 'WM_QOS_CORRELATION_ID' is set
        if (WM_QOS_CORRELATION_ID == null) {
            throw new ApiException("Missing the required parameter 'WM_QOS_CORRELATION_ID' when calling displayItemStatus(Async)");
        }

        // verify the required parameter 'WM_SVC_NAME' is set
        if (WM_SVC_NAME == null) {
            throw new ApiException("Missing the required parameter 'WM_SVC_NAME' when calling displayItemStatus(Async)");
        }

        // verify the required parameter 'WM_SEC_TIMESTAMP' is set
        if (WM_SEC_TIMESTAMP == null) {
            throw new ApiException("Missing the required parameter 'WM_SEC_TIMESTAMP' when calling displayItemStatus(Async)");
        }

        // verify the required parameter 'WM_SEC_AUTH_SIGNATURE' is set
        if (WM_SEC_AUTH_SIGNATURE == null) {
            throw new ApiException("Missing the required parameter 'WM_SEC_AUTH_SIGNATURE' when calling displayItemStatus(Async)");
        }

        // verify the required parameter 'WM_CONSUMER_ID' is set
        if (WM_CONSUMER_ID == null) {
            throw new ApiException("Missing the required parameter 'WM_CONSUMER_ID' when calling displayItemStatus(Async)");
        }

        return displayItemStatusCall(feedId, WM_QOS_CORRELATION_ID, WM_SVC_NAME, WM_SEC_TIMESTAMP, WM_SEC_AUTH_SIGNATURE, WM_CONSUMER_ID, offset, limit, WM_CONSUMER_CHANNEL_TYPE, _callback);

    }


    private ApiResponse<FeedsDisplayItemStatusResponse> displayItemStatusWithHttpInfo(String feedId, String WM_QOS_CORRELATION_ID, String WM_SVC_NAME, String WM_SEC_TIMESTAMP, String WM_SEC_AUTH_SIGNATURE, String WM_CONSUMER_ID, String offset, String limit, String WM_CONSUMER_CHANNEL_TYPE) throws ApiException {
        okhttp3.Call localVarCall = displayItemStatusValidateBeforeCall(feedId, WM_QOS_CORRELATION_ID, WM_SVC_NAME, WM_SEC_TIMESTAMP, WM_SEC_AUTH_SIGNATURE, WM_CONSUMER_ID, offset, limit, WM_CONSUMER_CHANNEL_TYPE, null);
        Type localVarReturnType = new TypeToken<FeedsDisplayItemStatusResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call displayItemStatusAsync(String feedId, String WM_QOS_CORRELATION_ID, String WM_SVC_NAME, String WM_SEC_TIMESTAMP, String WM_SEC_AUTH_SIGNATURE, String WM_CONSUMER_ID, String offset, String limit, String WM_CONSUMER_CHANNEL_TYPE, final ApiCallback<FeedsDisplayItemStatusResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = displayItemStatusValidateBeforeCall(feedId, WM_QOS_CORRELATION_ID, WM_SVC_NAME, WM_SEC_TIMESTAMP, WM_SEC_AUTH_SIGNATURE, WM_CONSUMER_ID, offset, limit, WM_CONSUMER_CHANNEL_TYPE, _callback);
        Type localVarReturnType = new TypeToken<FeedsDisplayItemStatusResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DisplayItemStatusRequestBuilder {
        private final String feedId;
        private final String WM_QOS_CORRELATION_ID;
        private final String WM_SVC_NAME;
        private final String WM_SEC_TIMESTAMP;
        private final String WM_SEC_AUTH_SIGNATURE;
        private final String WM_CONSUMER_ID;
        private String offset;
        private String limit;
        private String WM_CONSUMER_CHANNEL_TYPE;

        private DisplayItemStatusRequestBuilder(String feedId, String WM_QOS_CORRELATION_ID, String WM_SVC_NAME, String WM_SEC_TIMESTAMP, String WM_SEC_AUTH_SIGNATURE, String WM_CONSUMER_ID) {
            this.feedId = feedId;
            this.WM_QOS_CORRELATION_ID = WM_QOS_CORRELATION_ID;
            this.WM_SVC_NAME = WM_SVC_NAME;
            this.WM_SEC_TIMESTAMP = WM_SEC_TIMESTAMP;
            this.WM_SEC_AUTH_SIGNATURE = WM_SEC_AUTH_SIGNATURE;
            this.WM_CONSUMER_ID = WM_CONSUMER_ID;
        }

        /**
         * Set offset
         * @param offset The object response to the starting number, where 0 is the first entity that can be requested. (optional, default to 0)
         * @return DisplayItemStatusRequestBuilder
         */
        public DisplayItemStatusRequestBuilder offset(String offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set limit
         * @param limit The number of entities to be returned. Maximum 20 entities. (optional, default to 20)
         * @return DisplayItemStatusRequestBuilder
         */
        public DisplayItemStatusRequestBuilder limit(String limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set WM_CONSUMER_CHANNEL_TYPE
         * @param WM_CONSUMER_CHANNEL_TYPE A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding (optional)
         * @return DisplayItemStatusRequestBuilder
         */
        public DisplayItemStatusRequestBuilder WM_CONSUMER_CHANNEL_TYPE(String WM_CONSUMER_CHANNEL_TYPE) {
            this.WM_CONSUMER_CHANNEL_TYPE = WM_CONSUMER_CHANNEL_TYPE;
            return this;
        }
        
        /**
         * Build call for displayItemStatus
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return displayItemStatusCall(feedId, WM_QOS_CORRELATION_ID, WM_SVC_NAME, WM_SEC_TIMESTAMP, WM_SEC_AUTH_SIGNATURE, WM_CONSUMER_ID, offset, limit, WM_CONSUMER_CHANNEL_TYPE, _callback);
        }


        /**
         * Execute displayItemStatus request
         * @return FeedsDisplayItemStatusResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Operation </td><td>  -  </td></tr>
         </table>
         */
        public FeedsDisplayItemStatusResponse execute() throws ApiException {
            ApiResponse<FeedsDisplayItemStatusResponse> localVarResp = displayItemStatusWithHttpInfo(feedId, WM_QOS_CORRELATION_ID, WM_SVC_NAME, WM_SEC_TIMESTAMP, WM_SEC_AUTH_SIGNATURE, WM_CONSUMER_ID, offset, limit, WM_CONSUMER_CHANNEL_TYPE);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute displayItemStatus request with HTTP info returned
         * @return ApiResponse&lt;FeedsDisplayItemStatusResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Operation </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<FeedsDisplayItemStatusResponse> executeWithHttpInfo() throws ApiException {
            return displayItemStatusWithHttpInfo(feedId, WM_QOS_CORRELATION_ID, WM_SVC_NAME, WM_SEC_TIMESTAMP, WM_SEC_AUTH_SIGNATURE, WM_CONSUMER_ID, offset, limit, WM_CONSUMER_CHANNEL_TYPE);
        }

        /**
         * Execute displayItemStatus request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<FeedsDisplayItemStatusResponse> _callback) throws ApiException {
            return displayItemStatusAsync(feedId, WM_QOS_CORRELATION_ID, WM_SVC_NAME, WM_SEC_TIMESTAMP, WM_SEC_AUTH_SIGNATURE, WM_CONSUMER_ID, offset, limit, WM_CONSUMER_CHANNEL_TYPE, _callback);
        }
    }

    /**
     * Feed status
     * You can display an item status for a specific feed ID. Use the feed ID returned from the upload an item feed API.
     * @param feedId A unique ID returned from the Bulk Upload API, used for tracking the Feed File. Special characters must be escaped (e.g., feedId: &#39;...3456@789...&#39; must be entered in the URL as &#39;...3456%40789). (required)
     * @param WM_QOS_CORRELATION_ID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID (required)
     * @param WM_SVC_NAME Walmart Service Name (required)
     * @param WM_SEC_TIMESTAMP The Epoch timestamp (required)
     * @param WM_SEC_AUTH_SIGNATURE The vendor&#39;s digital signature, generated by running the JAR file or custom generation code (required)
     * @param WM_CONSUMER_ID A unique ID required to access the API (required)
     * @return DisplayItemStatusRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Operation </td><td>  -  </td></tr>
     </table>
     */
    public DisplayItemStatusRequestBuilder displayItemStatus(String feedId, String WM_QOS_CORRELATION_ID, String WM_SVC_NAME, String WM_SEC_TIMESTAMP, String WM_SEC_AUTH_SIGNATURE, String WM_CONSUMER_ID) throws IllegalArgumentException {
        if (feedId == null) throw new IllegalArgumentException("\"feedId\" is required but got null");
            

        if (WM_QOS_CORRELATION_ID == null) throw new IllegalArgumentException("\"WM_QOS_CORRELATION_ID\" is required but got null");
            

        if (WM_SVC_NAME == null) throw new IllegalArgumentException("\"WM_SVC_NAME\" is required but got null");
            

        if (WM_SEC_TIMESTAMP == null) throw new IllegalArgumentException("\"WM_SEC_TIMESTAMP\" is required but got null");
            

        if (WM_SEC_AUTH_SIGNATURE == null) throw new IllegalArgumentException("\"WM_SEC_AUTH_SIGNATURE\" is required but got null");
            

        if (WM_CONSUMER_ID == null) throw new IllegalArgumentException("\"WM_CONSUMER_ID\" is required but got null");
            

        return new DisplayItemStatusRequestBuilder(feedId, WM_QOS_CORRELATION_ID, WM_SVC_NAME, WM_SEC_TIMESTAMP, WM_SEC_AUTH_SIGNATURE, WM_CONSUMER_ID);
    }
    private okhttp3.Call getFeedStatusCall(String feedId, String WM_QOS_CORRELATION_ID, String WM_SVC_NAME, String WM_SEC_TIMESTAMP, String WM_SEC_AUTH_SIGNATURE, String WM_CONSUMER_ID, String includeDetails, String offset, String limit, String WM_CONSUMER_CHANNEL_TYPE, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/feeds/{feedId}"
            .replace("{" + "feedId" + "}", localVarApiClient.escapeString(feedId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (includeDetails != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeDetails", includeDetails));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (WM_CONSUMER_CHANNEL_TYPE != null) {
            localVarHeaderParams.put("WM_CONSUMER.CHANNEL.TYPE", localVarApiClient.parameterToString(WM_CONSUMER_CHANNEL_TYPE));
        }

        if (WM_QOS_CORRELATION_ID != null) {
            localVarHeaderParams.put("WM_QOS.CORRELATION_ID", localVarApiClient.parameterToString(WM_QOS_CORRELATION_ID));
        }

        if (WM_SVC_NAME != null) {
            localVarHeaderParams.put("WM_SVC.NAME", localVarApiClient.parameterToString(WM_SVC_NAME));
        }

        if (WM_SEC_TIMESTAMP != null) {
            localVarHeaderParams.put("WM_SEC.TIMESTAMP", localVarApiClient.parameterToString(WM_SEC_TIMESTAMP));
        }

        if (WM_SEC_AUTH_SIGNATURE != null) {
            localVarHeaderParams.put("WM_SEC.AUTH_SIGNATURE", localVarApiClient.parameterToString(WM_SEC_AUTH_SIGNATURE));
        }

        if (WM_CONSUMER_ID != null) {
            localVarHeaderParams.put("WM_CONSUMER.ID", localVarApiClient.parameterToString(WM_CONSUMER_ID));
        }

        final String[] localVarAccepts = {
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "privateKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFeedStatusValidateBeforeCall(String feedId, String WM_QOS_CORRELATION_ID, String WM_SVC_NAME, String WM_SEC_TIMESTAMP, String WM_SEC_AUTH_SIGNATURE, String WM_CONSUMER_ID, String includeDetails, String offset, String limit, String WM_CONSUMER_CHANNEL_TYPE, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'feedId' is set
        if (feedId == null) {
            throw new ApiException("Missing the required parameter 'feedId' when calling getFeedStatus(Async)");
        }

        // verify the required parameter 'WM_QOS_CORRELATION_ID' is set
        if (WM_QOS_CORRELATION_ID == null) {
            throw new ApiException("Missing the required parameter 'WM_QOS_CORRELATION_ID' when calling getFeedStatus(Async)");
        }

        // verify the required parameter 'WM_SVC_NAME' is set
        if (WM_SVC_NAME == null) {
            throw new ApiException("Missing the required parameter 'WM_SVC_NAME' when calling getFeedStatus(Async)");
        }

        // verify the required parameter 'WM_SEC_TIMESTAMP' is set
        if (WM_SEC_TIMESTAMP == null) {
            throw new ApiException("Missing the required parameter 'WM_SEC_TIMESTAMP' when calling getFeedStatus(Async)");
        }

        // verify the required parameter 'WM_SEC_AUTH_SIGNATURE' is set
        if (WM_SEC_AUTH_SIGNATURE == null) {
            throw new ApiException("Missing the required parameter 'WM_SEC_AUTH_SIGNATURE' when calling getFeedStatus(Async)");
        }

        // verify the required parameter 'WM_CONSUMER_ID' is set
        if (WM_CONSUMER_ID == null) {
            throw new ApiException("Missing the required parameter 'WM_CONSUMER_ID' when calling getFeedStatus(Async)");
        }

        return getFeedStatusCall(feedId, WM_QOS_CORRELATION_ID, WM_SVC_NAME, WM_SEC_TIMESTAMP, WM_SEC_AUTH_SIGNATURE, WM_CONSUMER_ID, includeDetails, offset, limit, WM_CONSUMER_CHANNEL_TYPE, _callback);

    }


    private ApiResponse<FeedsGetFeedStatusResponse> getFeedStatusWithHttpInfo(String feedId, String WM_QOS_CORRELATION_ID, String WM_SVC_NAME, String WM_SEC_TIMESTAMP, String WM_SEC_AUTH_SIGNATURE, String WM_CONSUMER_ID, String includeDetails, String offset, String limit, String WM_CONSUMER_CHANNEL_TYPE) throws ApiException {
        okhttp3.Call localVarCall = getFeedStatusValidateBeforeCall(feedId, WM_QOS_CORRELATION_ID, WM_SVC_NAME, WM_SEC_TIMESTAMP, WM_SEC_AUTH_SIGNATURE, WM_CONSUMER_ID, includeDetails, offset, limit, WM_CONSUMER_CHANNEL_TYPE, null);
        Type localVarReturnType = new TypeToken<FeedsGetFeedStatusResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getFeedStatusAsync(String feedId, String WM_QOS_CORRELATION_ID, String WM_SVC_NAME, String WM_SEC_TIMESTAMP, String WM_SEC_AUTH_SIGNATURE, String WM_CONSUMER_ID, String includeDetails, String offset, String limit, String WM_CONSUMER_CHANNEL_TYPE, final ApiCallback<FeedsGetFeedStatusResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFeedStatusValidateBeforeCall(feedId, WM_QOS_CORRELATION_ID, WM_SVC_NAME, WM_SEC_TIMESTAMP, WM_SEC_AUTH_SIGNATURE, WM_CONSUMER_ID, includeDetails, offset, limit, WM_CONSUMER_CHANNEL_TYPE, _callback);
        Type localVarReturnType = new TypeToken<FeedsGetFeedStatusResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetFeedStatusRequestBuilder {
        private final String feedId;
        private final String WM_QOS_CORRELATION_ID;
        private final String WM_SVC_NAME;
        private final String WM_SEC_TIMESTAMP;
        private final String WM_SEC_AUTH_SIGNATURE;
        private final String WM_CONSUMER_ID;
        private String includeDetails;
        private String offset;
        private String limit;
        private String WM_CONSUMER_CHANNEL_TYPE;

        private GetFeedStatusRequestBuilder(String feedId, String WM_QOS_CORRELATION_ID, String WM_SVC_NAME, String WM_SEC_TIMESTAMP, String WM_SEC_AUTH_SIGNATURE, String WM_CONSUMER_ID) {
            this.feedId = feedId;
            this.WM_QOS_CORRELATION_ID = WM_QOS_CORRELATION_ID;
            this.WM_SVC_NAME = WM_SVC_NAME;
            this.WM_SEC_TIMESTAMP = WM_SEC_TIMESTAMP;
            this.WM_SEC_AUTH_SIGNATURE = WM_SEC_AUTH_SIGNATURE;
            this.WM_CONSUMER_ID = WM_CONSUMER_ID;
        }

        /**
         * Set includeDetails
         * @param includeDetails Includes details of each entity in the feed. Do not set this parameter to true. (optional, default to false)
         * @return GetFeedStatusRequestBuilder
         */
        public GetFeedStatusRequestBuilder includeDetails(String includeDetails) {
            this.includeDetails = includeDetails;
            return this;
        }
        
        /**
         * Set offset
         * @param offset The object response to the starting number, where 0 is the first entity that can be requested. (optional, default to 0)
         * @return GetFeedStatusRequestBuilder
         */
        public GetFeedStatusRequestBuilder offset(String offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set limit
         * @param limit The number of entities to be returned. Maximum 20 entities. (optional, default to 20)
         * @return GetFeedStatusRequestBuilder
         */
        public GetFeedStatusRequestBuilder limit(String limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set WM_CONSUMER_CHANNEL_TYPE
         * @param WM_CONSUMER_CHANNEL_TYPE A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding (optional)
         * @return GetFeedStatusRequestBuilder
         */
        public GetFeedStatusRequestBuilder WM_CONSUMER_CHANNEL_TYPE(String WM_CONSUMER_CHANNEL_TYPE) {
            this.WM_CONSUMER_CHANNEL_TYPE = WM_CONSUMER_CHANNEL_TYPE;
            return this;
        }
        
        /**
         * Build call for getFeedStatus
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getFeedStatusCall(feedId, WM_QOS_CORRELATION_ID, WM_SVC_NAME, WM_SEC_TIMESTAMP, WM_SEC_AUTH_SIGNATURE, WM_CONSUMER_ID, includeDetails, offset, limit, WM_CONSUMER_CHANNEL_TYPE, _callback);
        }


        /**
         * Execute getFeedStatus request
         * @return FeedsGetFeedStatusResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Operation </td><td>  -  </td></tr>
         </table>
         */
        public FeedsGetFeedStatusResponse execute() throws ApiException {
            ApiResponse<FeedsGetFeedStatusResponse> localVarResp = getFeedStatusWithHttpInfo(feedId, WM_QOS_CORRELATION_ID, WM_SVC_NAME, WM_SEC_TIMESTAMP, WM_SEC_AUTH_SIGNATURE, WM_CONSUMER_ID, includeDetails, offset, limit, WM_CONSUMER_CHANNEL_TYPE);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getFeedStatus request with HTTP info returned
         * @return ApiResponse&lt;FeedsGetFeedStatusResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Operation </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<FeedsGetFeedStatusResponse> executeWithHttpInfo() throws ApiException {
            return getFeedStatusWithHttpInfo(feedId, WM_QOS_CORRELATION_ID, WM_SVC_NAME, WM_SEC_TIMESTAMP, WM_SEC_AUTH_SIGNATURE, WM_CONSUMER_ID, includeDetails, offset, limit, WM_CONSUMER_CHANNEL_TYPE);
        }

        /**
         * Execute getFeedStatus request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<FeedsGetFeedStatusResponse> _callback) throws ApiException {
            return getFeedStatusAsync(feedId, WM_QOS_CORRELATION_ID, WM_SVC_NAME, WM_SEC_TIMESTAMP, WM_SEC_AUTH_SIGNATURE, WM_CONSUMER_ID, includeDetails, offset, limit, WM_CONSUMER_CHANNEL_TYPE, _callback);
        }
    }

    /**
     * Feed item status
     * You can display the status of all items for a specific feed ID. Use the feed ID returned from the upload an item feed API.
     * @param feedId A unique ID returned from the Bulk Upload API, used for tracking the Feed File. Special characters must be escaped (e.g., feedId: &#39;...3456@789...&#39; must be entered in the URL as &#39;...3456%40789). (required)
     * @param WM_QOS_CORRELATION_ID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID (required)
     * @param WM_SVC_NAME Walmart Service Name (required)
     * @param WM_SEC_TIMESTAMP The Epoch timestamp (required)
     * @param WM_SEC_AUTH_SIGNATURE The vendor&#39;s digital signature, generated by running the JAR file or custom generation code (required)
     * @param WM_CONSUMER_ID A unique ID required to access the API (required)
     * @return GetFeedStatusRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Operation </td><td>  -  </td></tr>
     </table>
     */
    public GetFeedStatusRequestBuilder getFeedStatus(String feedId, String WM_QOS_CORRELATION_ID, String WM_SVC_NAME, String WM_SEC_TIMESTAMP, String WM_SEC_AUTH_SIGNATURE, String WM_CONSUMER_ID) throws IllegalArgumentException {
        if (feedId == null) throw new IllegalArgumentException("\"feedId\" is required but got null");
            

        if (WM_QOS_CORRELATION_ID == null) throw new IllegalArgumentException("\"WM_QOS_CORRELATION_ID\" is required but got null");
            

        if (WM_SVC_NAME == null) throw new IllegalArgumentException("\"WM_SVC_NAME\" is required but got null");
            

        if (WM_SEC_TIMESTAMP == null) throw new IllegalArgumentException("\"WM_SEC_TIMESTAMP\" is required but got null");
            

        if (WM_SEC_AUTH_SIGNATURE == null) throw new IllegalArgumentException("\"WM_SEC_AUTH_SIGNATURE\" is required but got null");
            

        if (WM_CONSUMER_ID == null) throw new IllegalArgumentException("\"WM_CONSUMER_ID\" is required but got null");
            

        return new GetFeedStatusRequestBuilder(feedId, WM_QOS_CORRELATION_ID, WM_SVC_NAME, WM_SEC_TIMESTAMP, WM_SEC_AUTH_SIGNATURE, WM_CONSUMER_ID);
    }
}
