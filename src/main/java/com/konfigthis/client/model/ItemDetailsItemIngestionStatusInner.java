/*
 * Content Management
 * The content management feed allows you to process content for items in bulk. You can take in content via the content feeds. Use the XSDs to manage content.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.ItemDetailsItemIngestionStatusInnerIngestionErrors;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * The ingestion status of an individual item
 */
@ApiModel(description = "The ingestion status of an individual item")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class ItemDetailsItemIngestionStatusInner {
  public static final String SERIALIZED_NAME_MART_ID = "martId";
  @SerializedName(SERIALIZED_NAME_MART_ID)
  private Integer martId;

  public static final String SERIALIZED_NAME_SKU = "sku";
  @SerializedName(SERIALIZED_NAME_SKU)
  private String sku;

  public static final String SERIALIZED_NAME_WPID = "wpid";
  @SerializedName(SERIALIZED_NAME_WPID)
  private String wpid;

  public static final String SERIALIZED_NAME_INDEX = "index";
  @SerializedName(SERIALIZED_NAME_INDEX)
  private Integer index;

  /**
   * Can be one of the following: DATA_ERROR, SYSTEM_ERROR, TIMEOUT_ERROR, or INPROGRESS
   */
  @JsonAdapter(IngestionStatusEnum.Adapter.class)
 public enum IngestionStatusEnum {
    INPROGRESS("INPROGRESS"),
    
    SUCCESS("SUCCESS"),
    
    DATA_ERROR("DATA_ERROR"),
    
    SYSTEM_ERROR("SYSTEM_ERROR"),
    
    TIMEOUT_ERROR("TIMEOUT_ERROR");

    private String value;

    IngestionStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static IngestionStatusEnum fromValue(String value) {
      for (IngestionStatusEnum b : IngestionStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<IngestionStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final IngestionStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public IngestionStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return IngestionStatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_INGESTION_STATUS = "ingestionStatus";
  @SerializedName(SERIALIZED_NAME_INGESTION_STATUS)
  private IngestionStatusEnum ingestionStatus;

  public static final String SERIALIZED_NAME_INGESTION_ERRORS = "ingestionErrors";
  @SerializedName(SERIALIZED_NAME_INGESTION_ERRORS)
  private ItemDetailsItemIngestionStatusInnerIngestionErrors ingestionErrors;

  public ItemDetailsItemIngestionStatusInner() {
  }

  public ItemDetailsItemIngestionStatusInner martId(Integer martId) {
    
    
    
    
    this.martId = martId;
    return this;
  }

   /**
   * Mart ID that a user or seller uses for a marketplace
   * @return martId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Mart ID that a user or seller uses for a marketplace")

  public Integer getMartId() {
    return martId;
  }


  public void setMartId(Integer martId) {
    
    
    
    this.martId = martId;
  }


  public ItemDetailsItemIngestionStatusInner sku(String sku) {
    
    
    
    
    this.sku = sku;
    return this;
  }

   /**
   * An arbitrary alphanumeric unique ID, seller-specified, identifying each item.
   * @return sku
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "An arbitrary alphanumeric unique ID, seller-specified, identifying each item.")

  public String getSku() {
    return sku;
  }


  public void setSku(String sku) {
    
    
    
    this.sku = sku;
  }


  public ItemDetailsItemIngestionStatusInner wpid(String wpid) {
    
    
    
    
    this.wpid = wpid;
    return this;
  }

   /**
   * An alphanumeric product ID, generated by Walmart
   * @return wpid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "An alphanumeric product ID, generated by Walmart")

  public String getWpid() {
    return wpid;
  }


  public void setWpid(String wpid) {
    
    
    
    this.wpid = wpid;
  }


  public ItemDetailsItemIngestionStatusInner index(Integer index) {
    
    
    
    
    this.index = index;
    return this;
  }

   /**
   * index of items in the feed
   * @return index
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "index of items in the feed")

  public Integer getIndex() {
    return index;
  }


  public void setIndex(Integer index) {
    
    
    
    this.index = index;
  }


  public ItemDetailsItemIngestionStatusInner ingestionStatus(IngestionStatusEnum ingestionStatus) {
    
    
    
    
    this.ingestionStatus = ingestionStatus;
    return this;
  }

   /**
   * Can be one of the following: DATA_ERROR, SYSTEM_ERROR, TIMEOUT_ERROR, or INPROGRESS
   * @return ingestionStatus
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Can be one of the following: DATA_ERROR, SYSTEM_ERROR, TIMEOUT_ERROR, or INPROGRESS")

  public IngestionStatusEnum getIngestionStatus() {
    return ingestionStatus;
  }


  public void setIngestionStatus(IngestionStatusEnum ingestionStatus) {
    
    
    
    this.ingestionStatus = ingestionStatus;
  }


  public ItemDetailsItemIngestionStatusInner ingestionErrors(ItemDetailsItemIngestionStatusInnerIngestionErrors ingestionErrors) {
    
    
    
    
    this.ingestionErrors = ingestionErrors;
    return this;
  }

   /**
   * Get ingestionErrors
   * @return ingestionErrors
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ItemDetailsItemIngestionStatusInnerIngestionErrors getIngestionErrors() {
    return ingestionErrors;
  }


  public void setIngestionErrors(ItemDetailsItemIngestionStatusInnerIngestionErrors ingestionErrors) {
    
    
    
    this.ingestionErrors = ingestionErrors;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ItemDetailsItemIngestionStatusInner instance itself
   */
  public ItemDetailsItemIngestionStatusInner putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ItemDetailsItemIngestionStatusInner itemDetailsItemIngestionStatusInner = (ItemDetailsItemIngestionStatusInner) o;
    return Objects.equals(this.martId, itemDetailsItemIngestionStatusInner.martId) &&
        Objects.equals(this.sku, itemDetailsItemIngestionStatusInner.sku) &&
        Objects.equals(this.wpid, itemDetailsItemIngestionStatusInner.wpid) &&
        Objects.equals(this.index, itemDetailsItemIngestionStatusInner.index) &&
        Objects.equals(this.ingestionStatus, itemDetailsItemIngestionStatusInner.ingestionStatus) &&
        Objects.equals(this.ingestionErrors, itemDetailsItemIngestionStatusInner.ingestionErrors)&&
        Objects.equals(this.additionalProperties, itemDetailsItemIngestionStatusInner.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(martId, sku, wpid, index, ingestionStatus, ingestionErrors, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ItemDetailsItemIngestionStatusInner {\n");
    sb.append("    martId: ").append(toIndentedString(martId)).append("\n");
    sb.append("    sku: ").append(toIndentedString(sku)).append("\n");
    sb.append("    wpid: ").append(toIndentedString(wpid)).append("\n");
    sb.append("    index: ").append(toIndentedString(index)).append("\n");
    sb.append("    ingestionStatus: ").append(toIndentedString(ingestionStatus)).append("\n");
    sb.append("    ingestionErrors: ").append(toIndentedString(ingestionErrors)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("martId");
    openapiFields.add("sku");
    openapiFields.add("wpid");
    openapiFields.add("index");
    openapiFields.add("ingestionStatus");
    openapiFields.add("ingestionErrors");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ingestionStatus");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ItemDetailsItemIngestionStatusInner
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ItemDetailsItemIngestionStatusInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ItemDetailsItemIngestionStatusInner is not found in the empty JSON string", ItemDetailsItemIngestionStatusInner.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ItemDetailsItemIngestionStatusInner.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("sku") != null && !jsonObj.get("sku").isJsonNull()) && !jsonObj.get("sku").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sku` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sku").toString()));
      }
      if ((jsonObj.get("wpid") != null && !jsonObj.get("wpid").isJsonNull()) && !jsonObj.get("wpid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `wpid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("wpid").toString()));
      }
      if (!jsonObj.get("ingestionStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ingestionStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ingestionStatus").toString()));
      }
      // validate the optional field `ingestionErrors`
      if (jsonObj.get("ingestionErrors") != null && !jsonObj.get("ingestionErrors").isJsonNull()) {
        ItemDetailsItemIngestionStatusInnerIngestionErrors.validateJsonObject(jsonObj.getAsJsonObject("ingestionErrors"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ItemDetailsItemIngestionStatusInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ItemDetailsItemIngestionStatusInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ItemDetailsItemIngestionStatusInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ItemDetailsItemIngestionStatusInner.class));

       return (TypeAdapter<T>) new TypeAdapter<ItemDetailsItemIngestionStatusInner>() {
           @Override
           public void write(JsonWriter out, ItemDetailsItemIngestionStatusInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ItemDetailsItemIngestionStatusInner read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             ItemDetailsItemIngestionStatusInner instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ItemDetailsItemIngestionStatusInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ItemDetailsItemIngestionStatusInner
  * @throws IOException if the JSON string is invalid with respect to ItemDetailsItemIngestionStatusInner
  */
  public static ItemDetailsItemIngestionStatusInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ItemDetailsItemIngestionStatusInner.class);
  }

 /**
  * Convert an instance of ItemDetailsItemIngestionStatusInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

