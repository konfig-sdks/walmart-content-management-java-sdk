/*
 * Content Management
 * The content management feed allows you to process content for items in bulk. You can take in content via the content feeds. Use the XSDs to manage content.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Information about the individual feed
 */
@ApiModel(description = "Information about the individual feed")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class FeedRecord {
  public static final String SERIALIZED_NAME_FEED_ID = "feedId";
  @SerializedName(SERIALIZED_NAME_FEED_ID)
  private String feedId;

  public static final String SERIALIZED_NAME_FEED_SOURCE = "feedSource";
  @SerializedName(SERIALIZED_NAME_FEED_SOURCE)
  private String feedSource;

  public static final String SERIALIZED_NAME_FEED_TYPE = "feedType";
  @SerializedName(SERIALIZED_NAME_FEED_TYPE)
  private String feedType;

  public static final String SERIALIZED_NAME_PARTNER_ID = "partnerId";
  @SerializedName(SERIALIZED_NAME_PARTNER_ID)
  private String partnerId;

  public static final String SERIALIZED_NAME_ITEMS_RECEIVED = "itemsReceived";
  @SerializedName(SERIALIZED_NAME_ITEMS_RECEIVED)
  private Long itemsReceived;

  public static final String SERIALIZED_NAME_ITEMS_SUCCEEDED = "itemsSucceeded";
  @SerializedName(SERIALIZED_NAME_ITEMS_SUCCEEDED)
  private Long itemsSucceeded;

  public static final String SERIALIZED_NAME_ITEMS_FAILED = "itemsFailed";
  @SerializedName(SERIALIZED_NAME_ITEMS_FAILED)
  private Long itemsFailed;

  public static final String SERIALIZED_NAME_ITEMS_PROCESSING = "itemsProcessing";
  @SerializedName(SERIALIZED_NAME_ITEMS_PROCESSING)
  private Long itemsProcessing;

  public static final String SERIALIZED_NAME_FEED_STATUS = "feedStatus";
  @SerializedName(SERIALIZED_NAME_FEED_STATUS)
  private String feedStatus;

  public static final String SERIALIZED_NAME_FEED_DATE = "feedDate";
  @SerializedName(SERIALIZED_NAME_FEED_DATE)
  private OffsetDateTime feedDate;

  public static final String SERIALIZED_NAME_BATCH_ID = "batchId";
  @SerializedName(SERIALIZED_NAME_BATCH_ID)
  private String batchId;

  public static final String SERIALIZED_NAME_MODIFIED_DTM = "modifiedDtm";
  @SerializedName(SERIALIZED_NAME_MODIFIED_DTM)
  private OffsetDateTime modifiedDtm;

  public FeedRecord() {
  }

  public FeedRecord feedId(String feedId) {
    
    
    
    
    this.feedId = feedId;
    return this;
  }

   /**
   * A unique ID used for tracking the Feed File
   * @return feedId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A unique ID used for tracking the Feed File")

  public String getFeedId() {
    return feedId;
  }


  public void setFeedId(String feedId) {
    
    
    
    this.feedId = feedId;
  }


  public FeedRecord feedSource(String feedSource) {
    
    
    
    
    this.feedSource = feedSource;
    return this;
  }

   /**
   * The source of the feed
   * @return feedSource
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The source of the feed")

  public String getFeedSource() {
    return feedSource;
  }


  public void setFeedSource(String feedSource) {
    
    
    
    this.feedSource = feedSource;
  }


  public FeedRecord feedType(String feedType) {
    
    
    
    
    this.feedType = feedType;
    return this;
  }

   /**
   * The feed type
   * @return feedType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The feed type")

  public String getFeedType() {
    return feedType;
  }


  public void setFeedType(String feedType) {
    
    
    
    this.feedType = feedType;
  }


  public FeedRecord partnerId(String partnerId) {
    
    
    
    
    this.partnerId = partnerId;
    return this;
  }

   /**
   * The seller ID
   * @return partnerId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The seller ID")

  public String getPartnerId() {
    return partnerId;
  }


  public void setPartnerId(String partnerId) {
    
    
    
    this.partnerId = partnerId;
  }


  public FeedRecord itemsReceived(Long itemsReceived) {
    
    
    
    
    this.itemsReceived = itemsReceived;
    return this;
  }

   /**
   * The number of items received
   * @return itemsReceived
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The number of items received")

  public Long getItemsReceived() {
    return itemsReceived;
  }


  public void setItemsReceived(Long itemsReceived) {
    
    
    
    this.itemsReceived = itemsReceived;
  }


  public FeedRecord itemsSucceeded(Long itemsSucceeded) {
    
    
    
    
    this.itemsSucceeded = itemsSucceeded;
    return this;
  }

   /**
   * The number of items in the feed that have successfully processed
   * @return itemsSucceeded
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The number of items in the feed that have successfully processed")

  public Long getItemsSucceeded() {
    return itemsSucceeded;
  }


  public void setItemsSucceeded(Long itemsSucceeded) {
    
    
    
    this.itemsSucceeded = itemsSucceeded;
  }


  public FeedRecord itemsFailed(Long itemsFailed) {
    
    
    
    
    this.itemsFailed = itemsFailed;
    return this;
  }

   /**
   * The number of items in the feed that failed due to a data or system error
   * @return itemsFailed
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The number of items in the feed that failed due to a data or system error")

  public Long getItemsFailed() {
    return itemsFailed;
  }


  public void setItemsFailed(Long itemsFailed) {
    
    
    
    this.itemsFailed = itemsFailed;
  }


  public FeedRecord itemsProcessing(Long itemsProcessing) {
    
    
    
    
    this.itemsProcessing = itemsProcessing;
    return this;
  }

   /**
   * The number of items in the feed that are still in progress
   * @return itemsProcessing
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The number of items in the feed that are still in progress")

  public Long getItemsProcessing() {
    return itemsProcessing;
  }


  public void setItemsProcessing(Long itemsProcessing) {
    
    
    
    this.itemsProcessing = itemsProcessing;
  }


  public FeedRecord feedStatus(String feedStatus) {
    
    
    
    
    this.feedStatus = feedStatus;
    return this;
  }

   /**
   * Can be one of the following: RECEIVED, INPROGRESS, PROCESSED, or ERROR. For details, see the definitions listed under &#39;Feed Statuses&#39; at the beginning of this section.
   * @return feedStatus
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Can be one of the following: RECEIVED, INPROGRESS, PROCESSED, or ERROR. For details, see the definitions listed under 'Feed Statuses' at the beginning of this section.")

  public String getFeedStatus() {
    return feedStatus;
  }


  public void setFeedStatus(String feedStatus) {
    
    
    
    this.feedStatus = feedStatus;
  }


  public FeedRecord feedDate(OffsetDateTime feedDate) {
    
    
    
    
    this.feedDate = feedDate;
    return this;
  }

   /**
   * The date and time the feed was submitted. Format: yyyymmddThh:mm:ss.xxxz
   * @return feedDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The date and time the feed was submitted. Format: yyyymmddThh:mm:ss.xxxz")

  public OffsetDateTime getFeedDate() {
    return feedDate;
  }


  public void setFeedDate(OffsetDateTime feedDate) {
    
    
    
    this.feedDate = feedDate;
  }


  public FeedRecord batchId(String batchId) {
    
    
    
    
    this.batchId = batchId;
    return this;
  }

   /**
   * The batch ID for the feed, if provided
   * @return batchId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The batch ID for the feed, if provided")

  public String getBatchId() {
    return batchId;
  }


  public void setBatchId(String batchId) {
    
    
    
    this.batchId = batchId;
  }


  public FeedRecord modifiedDtm(OffsetDateTime modifiedDtm) {
    
    
    
    
    this.modifiedDtm = modifiedDtm;
    return this;
  }

   /**
   * The most recent time the feed was modified. Format: yyyymmddThh:mm:ss.xxxz
   * @return modifiedDtm
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The most recent time the feed was modified. Format: yyyymmddThh:mm:ss.xxxz")

  public OffsetDateTime getModifiedDtm() {
    return modifiedDtm;
  }


  public void setModifiedDtm(OffsetDateTime modifiedDtm) {
    
    
    
    this.modifiedDtm = modifiedDtm;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the FeedRecord instance itself
   */
  public FeedRecord putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FeedRecord feedRecord = (FeedRecord) o;
    return Objects.equals(this.feedId, feedRecord.feedId) &&
        Objects.equals(this.feedSource, feedRecord.feedSource) &&
        Objects.equals(this.feedType, feedRecord.feedType) &&
        Objects.equals(this.partnerId, feedRecord.partnerId) &&
        Objects.equals(this.itemsReceived, feedRecord.itemsReceived) &&
        Objects.equals(this.itemsSucceeded, feedRecord.itemsSucceeded) &&
        Objects.equals(this.itemsFailed, feedRecord.itemsFailed) &&
        Objects.equals(this.itemsProcessing, feedRecord.itemsProcessing) &&
        Objects.equals(this.feedStatus, feedRecord.feedStatus) &&
        Objects.equals(this.feedDate, feedRecord.feedDate) &&
        Objects.equals(this.batchId, feedRecord.batchId) &&
        Objects.equals(this.modifiedDtm, feedRecord.modifiedDtm)&&
        Objects.equals(this.additionalProperties, feedRecord.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(feedId, feedSource, feedType, partnerId, itemsReceived, itemsSucceeded, itemsFailed, itemsProcessing, feedStatus, feedDate, batchId, modifiedDtm, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FeedRecord {\n");
    sb.append("    feedId: ").append(toIndentedString(feedId)).append("\n");
    sb.append("    feedSource: ").append(toIndentedString(feedSource)).append("\n");
    sb.append("    feedType: ").append(toIndentedString(feedType)).append("\n");
    sb.append("    partnerId: ").append(toIndentedString(partnerId)).append("\n");
    sb.append("    itemsReceived: ").append(toIndentedString(itemsReceived)).append("\n");
    sb.append("    itemsSucceeded: ").append(toIndentedString(itemsSucceeded)).append("\n");
    sb.append("    itemsFailed: ").append(toIndentedString(itemsFailed)).append("\n");
    sb.append("    itemsProcessing: ").append(toIndentedString(itemsProcessing)).append("\n");
    sb.append("    feedStatus: ").append(toIndentedString(feedStatus)).append("\n");
    sb.append("    feedDate: ").append(toIndentedString(feedDate)).append("\n");
    sb.append("    batchId: ").append(toIndentedString(batchId)).append("\n");
    sb.append("    modifiedDtm: ").append(toIndentedString(modifiedDtm)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("feedId");
    openapiFields.add("feedSource");
    openapiFields.add("feedType");
    openapiFields.add("partnerId");
    openapiFields.add("itemsReceived");
    openapiFields.add("itemsSucceeded");
    openapiFields.add("itemsFailed");
    openapiFields.add("itemsProcessing");
    openapiFields.add("feedStatus");
    openapiFields.add("feedDate");
    openapiFields.add("batchId");
    openapiFields.add("modifiedDtm");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to FeedRecord
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!FeedRecord.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FeedRecord is not found in the empty JSON string", FeedRecord.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("feedId") != null && !jsonObj.get("feedId").isJsonNull()) && !jsonObj.get("feedId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `feedId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("feedId").toString()));
      }
      if ((jsonObj.get("feedSource") != null && !jsonObj.get("feedSource").isJsonNull()) && !jsonObj.get("feedSource").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `feedSource` to be a primitive type in the JSON string but got `%s`", jsonObj.get("feedSource").toString()));
      }
      if ((jsonObj.get("feedType") != null && !jsonObj.get("feedType").isJsonNull()) && !jsonObj.get("feedType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `feedType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("feedType").toString()));
      }
      if ((jsonObj.get("partnerId") != null && !jsonObj.get("partnerId").isJsonNull()) && !jsonObj.get("partnerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `partnerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("partnerId").toString()));
      }
      if ((jsonObj.get("feedStatus") != null && !jsonObj.get("feedStatus").isJsonNull()) && !jsonObj.get("feedStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `feedStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("feedStatus").toString()));
      }
      if ((jsonObj.get("batchId") != null && !jsonObj.get("batchId").isJsonNull()) && !jsonObj.get("batchId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `batchId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("batchId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FeedRecord.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FeedRecord' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FeedRecord> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FeedRecord.class));

       return (TypeAdapter<T>) new TypeAdapter<FeedRecord>() {
           @Override
           public void write(JsonWriter out, FeedRecord value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public FeedRecord read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             FeedRecord instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of FeedRecord given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of FeedRecord
  * @throws IOException if the JSON string is invalid with respect to FeedRecord
  */
  public static FeedRecord fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FeedRecord.class);
  }

 /**
  * Convert an instance of FeedRecord to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

