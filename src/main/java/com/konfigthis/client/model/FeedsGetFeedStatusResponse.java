/*
 * Content Management
 * The content management feed allows you to process content for items in bulk. You can take in content via the content feeds. Use the XSDs to manage content.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.FeedRecordResponseErrorsInner;
import com.konfigthis.client.model.ItemDetailsItemIngestionStatusInnerIngestionErrors;
import com.konfigthis.client.model.PartnerFeedResponseItemDetails;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * FeedsGetFeedStatusResponse
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class FeedsGetFeedStatusResponse {
  public static final String SERIALIZED_NAME_ERRORS = "errors";
  @SerializedName(SERIALIZED_NAME_ERRORS)
  private List<FeedRecordResponseErrorsInner> errors = null;

  public static final String SERIALIZED_NAME_FEED_ID = "feedId";
  @SerializedName(SERIALIZED_NAME_FEED_ID)
  private String feedId;

  /**
   * Can be one of the following: RECEIVED, INPROGRESS, PROCESSED, or ERROR
   */
  @JsonAdapter(FeedStatusEnum.Adapter.class)
 public enum FeedStatusEnum {
    RECEIVED("RECEIVED"),
    
    INPROGRESS("INPROGRESS"),
    
    PROCESSED("PROCESSED"),
    
    ERROR("ERROR");

    private String value;

    FeedStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FeedStatusEnum fromValue(String value) {
      for (FeedStatusEnum b : FeedStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FeedStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FeedStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FeedStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FeedStatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_FEED_STATUS = "feedStatus";
  @SerializedName(SERIALIZED_NAME_FEED_STATUS)
  private FeedStatusEnum feedStatus;

  public static final String SERIALIZED_NAME_INGESTION_ERRORS = "ingestionErrors";
  @SerializedName(SERIALIZED_NAME_INGESTION_ERRORS)
  private ItemDetailsItemIngestionStatusInnerIngestionErrors ingestionErrors;

  public static final String SERIALIZED_NAME_ITEMS_RECEIVED = "itemsReceived";
  @SerializedName(SERIALIZED_NAME_ITEMS_RECEIVED)
  private Integer itemsReceived;

  public static final String SERIALIZED_NAME_ITEMS_SUCCEEDED = "itemsSucceeded";
  @SerializedName(SERIALIZED_NAME_ITEMS_SUCCEEDED)
  private Integer itemsSucceeded;

  public static final String SERIALIZED_NAME_ITEMS_FAILED = "itemsFailed";
  @SerializedName(SERIALIZED_NAME_ITEMS_FAILED)
  private Integer itemsFailed;

  public static final String SERIALIZED_NAME_ITEMS_PROCESSING = "itemsProcessing";
  @SerializedName(SERIALIZED_NAME_ITEMS_PROCESSING)
  private Integer itemsProcessing;

  public static final String SERIALIZED_NAME_OFFSET = "offset";
  @SerializedName(SERIALIZED_NAME_OFFSET)
  private Integer offset;

  public static final String SERIALIZED_NAME_LIMIT = "limit";
  @SerializedName(SERIALIZED_NAME_LIMIT)
  private Integer limit;

  public static final String SERIALIZED_NAME_ITEM_DETAILS = "itemDetails";
  @SerializedName(SERIALIZED_NAME_ITEM_DETAILS)
  private PartnerFeedResponseItemDetails itemDetails;

  public FeedsGetFeedStatusResponse() {
  }

  public FeedsGetFeedStatusResponse errors(List<FeedRecordResponseErrorsInner> errors) {
    
    
    
    
    this.errors = errors;
    return this;
  }

  public FeedsGetFeedStatusResponse addErrorsItem(FeedRecordResponseErrorsInner errorsItem) {
    if (this.errors == null) {
      this.errors = new ArrayList<>();
    }
    this.errors.add(errorsItem);
    return this;
  }

   /**
   * Get errors
   * @return errors
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<FeedRecordResponseErrorsInner> getErrors() {
    return errors;
  }


  public void setErrors(List<FeedRecordResponseErrorsInner> errors) {
    
    
    
    this.errors = errors;
  }


  public FeedsGetFeedStatusResponse feedId(String feedId) {
    
    
    
    
    this.feedId = feedId;
    return this;
  }

   /**
   * A unique ID used for tracking the Feed File
   * @return feedId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A unique ID used for tracking the Feed File")

  public String getFeedId() {
    return feedId;
  }


  public void setFeedId(String feedId) {
    
    
    
    this.feedId = feedId;
  }


  public FeedsGetFeedStatusResponse feedStatus(FeedStatusEnum feedStatus) {
    
    
    
    
    this.feedStatus = feedStatus;
    return this;
  }

   /**
   * Can be one of the following: RECEIVED, INPROGRESS, PROCESSED, or ERROR
   * @return feedStatus
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Can be one of the following: RECEIVED, INPROGRESS, PROCESSED, or ERROR")

  public FeedStatusEnum getFeedStatus() {
    return feedStatus;
  }


  public void setFeedStatus(FeedStatusEnum feedStatus) {
    
    
    
    this.feedStatus = feedStatus;
  }


  public FeedsGetFeedStatusResponse ingestionErrors(ItemDetailsItemIngestionStatusInnerIngestionErrors ingestionErrors) {
    
    
    
    
    this.ingestionErrors = ingestionErrors;
    return this;
  }

   /**
   * Get ingestionErrors
   * @return ingestionErrors
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ItemDetailsItemIngestionStatusInnerIngestionErrors getIngestionErrors() {
    return ingestionErrors;
  }


  public void setIngestionErrors(ItemDetailsItemIngestionStatusInnerIngestionErrors ingestionErrors) {
    
    
    
    this.ingestionErrors = ingestionErrors;
  }


  public FeedsGetFeedStatusResponse itemsReceived(Integer itemsReceived) {
    
    
    
    
    this.itemsReceived = itemsReceived;
    return this;
  }

   /**
   * The number of items received in the feed
   * @return itemsReceived
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The number of items received in the feed")

  public Integer getItemsReceived() {
    return itemsReceived;
  }


  public void setItemsReceived(Integer itemsReceived) {
    
    
    
    this.itemsReceived = itemsReceived;
  }


  public FeedsGetFeedStatusResponse itemsSucceeded(Integer itemsSucceeded) {
    
    
    
    
    this.itemsSucceeded = itemsSucceeded;
    return this;
  }

   /**
   * The number of items in the feed that processed successfully
   * @return itemsSucceeded
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The number of items in the feed that processed successfully")

  public Integer getItemsSucceeded() {
    return itemsSucceeded;
  }


  public void setItemsSucceeded(Integer itemsSucceeded) {
    
    
    
    this.itemsSucceeded = itemsSucceeded;
  }


  public FeedsGetFeedStatusResponse itemsFailed(Integer itemsFailed) {
    
    
    
    
    this.itemsFailed = itemsFailed;
    return this;
  }

   /**
   * The number of items in the feed that failed due to a data or system error
   * @return itemsFailed
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The number of items in the feed that failed due to a data or system error")

  public Integer getItemsFailed() {
    return itemsFailed;
  }


  public void setItemsFailed(Integer itemsFailed) {
    
    
    
    this.itemsFailed = itemsFailed;
  }


  public FeedsGetFeedStatusResponse itemsProcessing(Integer itemsProcessing) {
    
    
    
    
    this.itemsProcessing = itemsProcessing;
    return this;
  }

   /**
   * The number of items in the feed that are still processing
   * @return itemsProcessing
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The number of items in the feed that are still processing")

  public Integer getItemsProcessing() {
    return itemsProcessing;
  }


  public void setItemsProcessing(Integer itemsProcessing) {
    
    
    
    this.itemsProcessing = itemsProcessing;
  }


  public FeedsGetFeedStatusResponse offset(Integer offset) {
    
    
    
    
    this.offset = offset;
    return this;
  }

   /**
   * The object response to the starting number, where 0 is the first entity available for request
   * @return offset
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The object response to the starting number, where 0 is the first entity available for request")

  public Integer getOffset() {
    return offset;
  }


  public void setOffset(Integer offset) {
    
    
    
    this.offset = offset;
  }


  public FeedsGetFeedStatusResponse limit(Integer limit) {
    
    
    
    
    this.limit = limit;
    return this;
  }

   /**
   * The number of items returned. Cannot be greater than 1000.
   * @return limit
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The number of items returned. Cannot be greater than 1000.")

  public Integer getLimit() {
    return limit;
  }


  public void setLimit(Integer limit) {
    
    
    
    this.limit = limit;
  }


  public FeedsGetFeedStatusResponse itemDetails(PartnerFeedResponseItemDetails itemDetails) {
    
    
    
    
    this.itemDetails = itemDetails;
    return this;
  }

   /**
   * Get itemDetails
   * @return itemDetails
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public PartnerFeedResponseItemDetails getItemDetails() {
    return itemDetails;
  }


  public void setItemDetails(PartnerFeedResponseItemDetails itemDetails) {
    
    
    
    this.itemDetails = itemDetails;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the FeedsGetFeedStatusResponse instance itself
   */
  public FeedsGetFeedStatusResponse putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FeedsGetFeedStatusResponse feedsGetFeedStatusResponse = (FeedsGetFeedStatusResponse) o;
    return Objects.equals(this.errors, feedsGetFeedStatusResponse.errors) &&
        Objects.equals(this.feedId, feedsGetFeedStatusResponse.feedId) &&
        Objects.equals(this.feedStatus, feedsGetFeedStatusResponse.feedStatus) &&
        Objects.equals(this.ingestionErrors, feedsGetFeedStatusResponse.ingestionErrors) &&
        Objects.equals(this.itemsReceived, feedsGetFeedStatusResponse.itemsReceived) &&
        Objects.equals(this.itemsSucceeded, feedsGetFeedStatusResponse.itemsSucceeded) &&
        Objects.equals(this.itemsFailed, feedsGetFeedStatusResponse.itemsFailed) &&
        Objects.equals(this.itemsProcessing, feedsGetFeedStatusResponse.itemsProcessing) &&
        Objects.equals(this.offset, feedsGetFeedStatusResponse.offset) &&
        Objects.equals(this.limit, feedsGetFeedStatusResponse.limit) &&
        Objects.equals(this.itemDetails, feedsGetFeedStatusResponse.itemDetails)&&
        Objects.equals(this.additionalProperties, feedsGetFeedStatusResponse.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(errors, feedId, feedStatus, ingestionErrors, itemsReceived, itemsSucceeded, itemsFailed, itemsProcessing, offset, limit, itemDetails, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FeedsGetFeedStatusResponse {\n");
    sb.append("    errors: ").append(toIndentedString(errors)).append("\n");
    sb.append("    feedId: ").append(toIndentedString(feedId)).append("\n");
    sb.append("    feedStatus: ").append(toIndentedString(feedStatus)).append("\n");
    sb.append("    ingestionErrors: ").append(toIndentedString(ingestionErrors)).append("\n");
    sb.append("    itemsReceived: ").append(toIndentedString(itemsReceived)).append("\n");
    sb.append("    itemsSucceeded: ").append(toIndentedString(itemsSucceeded)).append("\n");
    sb.append("    itemsFailed: ").append(toIndentedString(itemsFailed)).append("\n");
    sb.append("    itemsProcessing: ").append(toIndentedString(itemsProcessing)).append("\n");
    sb.append("    offset: ").append(toIndentedString(offset)).append("\n");
    sb.append("    limit: ").append(toIndentedString(limit)).append("\n");
    sb.append("    itemDetails: ").append(toIndentedString(itemDetails)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("errors");
    openapiFields.add("feedId");
    openapiFields.add("feedStatus");
    openapiFields.add("ingestionErrors");
    openapiFields.add("itemsReceived");
    openapiFields.add("itemsSucceeded");
    openapiFields.add("itemsFailed");
    openapiFields.add("itemsProcessing");
    openapiFields.add("offset");
    openapiFields.add("limit");
    openapiFields.add("itemDetails");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to FeedsGetFeedStatusResponse
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!FeedsGetFeedStatusResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FeedsGetFeedStatusResponse is not found in the empty JSON string", FeedsGetFeedStatusResponse.openapiRequiredFields.toString()));
        }
      }
      if (jsonObj.get("errors") != null && !jsonObj.get("errors").isJsonNull()) {
        JsonArray jsonArrayerrors = jsonObj.getAsJsonArray("errors");
        if (jsonArrayerrors != null) {
          // ensure the json data is an array
          if (!jsonObj.get("errors").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `errors` to be an array in the JSON string but got `%s`", jsonObj.get("errors").toString()));
          }

          // validate the optional field `errors` (array)
          for (int i = 0; i < jsonArrayerrors.size(); i++) {
            FeedRecordResponseErrorsInner.validateJsonObject(jsonArrayerrors.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("feedId") != null && !jsonObj.get("feedId").isJsonNull()) && !jsonObj.get("feedId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `feedId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("feedId").toString()));
      }
      if ((jsonObj.get("feedStatus") != null && !jsonObj.get("feedStatus").isJsonNull()) && !jsonObj.get("feedStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `feedStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("feedStatus").toString()));
      }
      // validate the optional field `ingestionErrors`
      if (jsonObj.get("ingestionErrors") != null && !jsonObj.get("ingestionErrors").isJsonNull()) {
        ItemDetailsItemIngestionStatusInnerIngestionErrors.validateJsonObject(jsonObj.getAsJsonObject("ingestionErrors"));
      }
      // validate the optional field `itemDetails`
      if (jsonObj.get("itemDetails") != null && !jsonObj.get("itemDetails").isJsonNull()) {
        PartnerFeedResponseItemDetails.validateJsonObject(jsonObj.getAsJsonObject("itemDetails"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FeedsGetFeedStatusResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FeedsGetFeedStatusResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FeedsGetFeedStatusResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FeedsGetFeedStatusResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<FeedsGetFeedStatusResponse>() {
           @Override
           public void write(JsonWriter out, FeedsGetFeedStatusResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public FeedsGetFeedStatusResponse read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             FeedsGetFeedStatusResponse instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of FeedsGetFeedStatusResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of FeedsGetFeedStatusResponse
  * @throws IOException if the JSON string is invalid with respect to FeedsGetFeedStatusResponse
  */
  public static FeedsGetFeedStatusResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FeedsGetFeedStatusResponse.class);
  }

 /**
  * Convert an instance of FeedsGetFeedStatusResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

